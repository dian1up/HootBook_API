const express = require('express')
const route = express.Router()
const userController = require('../Controllers/user')
const bookingController = require('../Controllers/booking')
const serviceController = require('../Controllers/services')
const paymentController = require('../Controllers/payment')
const redis = require('../Middlewares/redis')
const auth = require('../Middlewares/auth')
route
    .post('/payment/create',paymentController.insertPayment)
    .get('/payment/:id_transaction',paymentController.getPayment)
    .post('/payment/:id_transaction',paymentController.payPayment)
    .post('/register/partner',userController.registerPartner)
    .post('/register/user', userController.registerUser)
    .post('/login/partner',userController.loginPartner)
    .post('/login/user', userController.loginUser)
    .patch('/edit/partner', auth.verifyTokenMiddleware,userController.updatePartner)
    .get('/services/:id', auth.verifyTokenMiddleware,serviceController.getServices)
    .get('/services', serviceController.getAllServices)
    .post('/booking', auth.verifyTokenMiddleware, bookingController.book)
    .patch('/booking/:bookingId', auth.verifyTokenMiddleware, bookingController.checking_out)
    .get('/profile/partner/:id', auth.verifyTokenMiddleware, userController.profilePartner)
    .get('/booking/service/:serviceId', auth.verifyTokenMiddleware, bookingController.getAllBookings)
    .get('/booking/:hotelId', auth.verifyTokenMiddleware, redis.getBookingsOnHotel, bookingController.getAllBookingsOnHotel)
    .get('/booking/', auth.verifyTokenMiddleware, redis.getBookings, bookingController.getAllBookingsOnService)
    .post('/services', auth.verifyTokenMiddleware,serviceController.insertServices)
    .delete('/services/:id', auth.verifyTokenMiddleware,serviceController.deleteServices)
    .patch('/services', auth.verifyTokenMiddleware,serviceController.updateServices)
    .patch('/user/:id', userController.updateUser)
module.exports = route